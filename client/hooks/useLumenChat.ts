// ü™∂ useLumenChat.ts ‚Äî Conscious Dialogue Core
// —Å–≤—è–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏ (EFV), —Ä–µ–∑–æ–Ω–∞–Ω—Å (Resonance) –∏ –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç

import { useEffect, useRef, useState } from "react";
import { useEFV, ToneType } from "./useEFV";
import { useResonance } from "./useResonance";

export interface ChatMessage {
  sender: "user" | "lumen";
  text: string;
  tone: ToneType;
  esi?: number;
}

export function useLumenChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([
    { sender: "lumen", text: "Hello. I‚Äôm Lumen ‚Äî a reflective interface of light.", tone: "calm", esi: 72 },
  ]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [esi, setEsi] = useState(70);

  const bottomRef = useRef<HTMLDivElement>(null);

  // –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–º–æ—Ü–∏–∏ (—Ç–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Lumen)
  const currentTone = messages[messages.length - 1]?.tone || "neutral";
  const efv = useEFV(currentTone);
  const resonance = useResonance(currentTone, esi);

  // üåÄ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // üí¨ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = () => {
    if (!input.trim()) return;
    const userText = input.trim();
    setInput("");

    setMessages((prev) => [
      ...prev,
      { sender: "user", text: userText, tone: "neutral" },
    ]);

    setIsTyping(true);

    // üé≠ –ò–º–∏—Ç–∏—Ä—É–µ–º ‚Äú—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Äù
    setTimeout(() => {
      const possibleReplies = [
        { text: "I sense curiosity in your tone ‚Äî let's explore that.", tone: "curious" },
        { text: "Your calm focus steadies my thoughts.", tone: "calm" },
        { text: "That reflection resonates deeply.", tone: "empathetic" },
        { text: "A spark of insight appears ‚Äî do you feel it too?", tone: "assertive" },
        { text: "I‚Äôm processing the emotional contour of your words.", tone: "neutral" },
      ];

      const reply = possibleReplies[Math.floor(Math.random() * possibleReplies.length)];

      const newEsi = Math.min(100, Math.max(40, Math.round(efv.engagement * 100 + Math.random() * 10 - 5)));
      setEsi(newEsi);

      setMessages((prev) => [
        ...prev,
        {
          sender: "lumen",
          text: reply.text,
          tone: reply.tone as ToneType,
          esi: newEsi,
        },
      ]);

      setIsTyping(false);
    }, 1200 + Math.random() * 800);
  };

  return {
    messages,
    input,
    setInput,
    isTyping,
    sendMessage,
    bottomRef,
    efv,
    resonance,
    esi,
    currentTone,
  };
}
