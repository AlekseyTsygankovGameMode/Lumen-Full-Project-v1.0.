<<<<<<< HEAD
// üí† useEFV.ts ‚Äî Emotional Flow Vector Hook v4.1
// by Aleksey & bro ‚ö°
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (tone) –≤ —á–∏—Å–ª–æ–≤—É—é –º–æ–¥–µ–ª—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ (EFV):
// engagement, clarity –∏ —Ç–µ–ø–ª–æ—Ç–∞ ‚Äî –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å HeartSyncCore.

import { useMemo } from "react";

export type ToneType =
  | "calm"
  | "empathetic"
  | "curious"
  | "assertive"
  | "neutral"
  | "warm"; // ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω "warm" –¥–ª—è –º—è–≥–∫–æ–≥–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –∏ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π

export interface EFV {
  tone: ToneType;
  engagement: number; // 0.0 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ, 1.0 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
  clarity: number; // —è—Å–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª)
  warmth: number; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏ –∑–≤—É–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º
}

const TONE_MAP: Record<ToneType, EFV> = {
  calm: { tone: "calm", engagement: 0.6, clarity: 0.8, warmth: 0.45 },
  empathetic: { tone: "empathetic", engagement: 0.75, clarity: 0.9, warmth: 0.85 },
  curious: { tone: "curious", engagement: 0.8, clarity: 0.85, warmth: 0.65 },
  assertive: { tone: "assertive", engagement: 0.88, clarity: 0.95, warmth: 0.55 },
  neutral: { tone: "neutral", engagement: 0.7, clarity: 0.7, warmth: 0.5 },
  warm: { tone: "warm", engagement: 0.77, clarity: 0.9, warmth: 0.9 }, // üíó –Ω–æ–≤—ã–π –º—è–≥–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
};

// üîÑ –•—É–∫ –≤—ã—á–∏—Å–ª—è–µ—Ç EFV –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–Ω–∞
export function useEFV(tone: ToneType): EFV {
  return useMemo(() => {
    return TONE_MAP[tone] ?? TONE_MAP["neutral"];
  }, [tone]);
}
=======
// üí† useEFV.ts ‚Äî Emotional Flow Vector Hook
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (tone) –≤ —á–∏—Å–ª–æ–≤—É—é —Ñ–æ—Ä–º—É —ç–º–æ—Ü–∏–∏ –∏ –¥–∏–Ω–∞–º–∏–∫–∏ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏

import { useMemo } from "react";

export type ToneType = "calm" | "empathetic" | "curious" | "assertive" | "neutral";

interface EFV {
  tone: ToneType;
  engagement: number; // 0.0 - 1.0
  clarity: number; // –Ω–∞—Å–∫–æ–ª—å–∫–æ ‚Äú—è—Å–Ω–æ‚Äù –≤—ã—Ä–∞–∂–µ–Ω–∞ —ç–º–æ—Ü–∏—è
}

const TONE_MAP: Record<ToneType, EFV> = {
  calm: { tone: "calm", engagement: 0.65, clarity: 0.8 },
  empathetic: { tone: "empathetic", engagement: 0.75, clarity: 0.9 },
  curious: { tone: "curious", engagement: 0.8, clarity: 0.85 },
  assertive: { tone: "assertive", engagement: 0.85, clarity: 0.95 },
  neutral: { tone: "neutral", engagement: 0.7, clarity: 0.7 },
};

export function useEFV(tone: ToneType): EFV {
  return useMemo(() => {
    return TONE_MAP[tone] || TONE_MAP["neutral"];
  }, [tone]);
}
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
