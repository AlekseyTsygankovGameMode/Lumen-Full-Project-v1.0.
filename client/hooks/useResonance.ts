// üåå useResonance.ts ‚Äî Emotional Resonance Hook
// —Å–≤—è–∑—ã–≤–∞–µ—Ç EFV (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä) —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ–º, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —Å–≤–µ—Ç–∞

import { useEffect, useState } from "react";
import { ToneType, useEFV } from "./useEFV";

interface ResonanceState {
  frequency: number;   // —á–∞—Å—Ç–æ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π UI (1.0 = —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, >1.3 = –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
  amplitude: number;   // —Å–∏–ª–∞ —Å–≤–µ—á–µ–Ω–∏—è
  warmth: number;      // —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0 = —Ö–æ–ª–æ–¥–Ω–æ, 1 = —Ç–µ–ø–ª–æ
  phase: string;       // —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è
}

export function useResonance(tone: ToneType, esi: number) {
  const efv = useEFV(tone);
  const [resonance, setResonance] = useState<ResonanceState>({
    frequency: 1.0,
    amplitude: 0.5,
    warmth: 0.5,
    phase: "steady",
  });

  useEffect(() => {
    // üîπ –±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: —á–µ–º –≤—ã—à–µ engagement ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ "–¥—ã—Ö–∞–Ω–∏–µ"
    const frequency = 0.8 + efv.engagement * 0.6 + esi / 300;

    // üîπ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å–≤–µ—á–µ–Ω–∏—è: –∑–∞–≤—è–∑–∞–Ω–∞ –Ω–∞ —è—Å–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
    const amplitude = 0.3 + efv.clarity * 0.6 + Math.sin(esi / 10) * 0.05;

    // üîπ —Ç–µ–ø–ª–æ—Ç—É —Ä–µ–≥—É–ª–∏—Ä—É–µ–º –ø–æ —Ç–æ–Ω—É
    const toneWarmthMap: Record<ToneType, number> = {
      calm: 0.4,
      empathetic: 0.8,
      curious: 0.7,
      assertive: 0.9,
      neutral: 0.5,
    };
    const warmth = toneWarmthMap[tone] ?? 0.5;

    // üîπ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∑—É –¥—ã—Ö–∞–Ω–∏—è
    const phase =
      esi > 90
        ? "peak"
        : esi > 75
        ? "flow"
        : esi > 60
        ? "steady"
        : "recovery";

    setResonance({
      frequency: parseFloat(frequency.toFixed(2)),
      amplitude: parseFloat(amplitude.toFixed(2)),
      warmth: parseFloat(warmth.toFixed(2)),
      phase,
    });
  }, [tone, esi, efv]);

  return resonance;
}
