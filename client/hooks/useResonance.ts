<<<<<<< HEAD
// üåå useResonanceSync v4.0 ‚Äî Unified Heartfield Loop
// by Aleksey & bro ‚ö°
// –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (UI) —Å —è–¥—Ä–æ–º HeartSyncCore.
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ–º, –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ–ø–ª–æ—Ç–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
// –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ requestAnimationFrame ‚Äî –æ–¥–Ω–æ –±–∏–µ–Ω–∏–µ, –æ–¥–Ω–æ –¥—ã—Ö–∞–Ω–∏–µ.

import { useEffect, useState } from "react";
import useHeartSync, { ResonanceState } from "../../core/HeartSyncCore";
import { ToneType, useEFV } from "./useEFV";

export interface ResonanceSyncState extends ResonanceState {
  uiPhase: number; // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É–≥–æ–ª –¥—ã—Ö–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π)
  luminosity: number; // –≤–∏–∑—É–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è
  moodColor: string; // —Ç–µ–∫—É—â–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ UI)
}

export function useResonanceSync(tone: ToneType, esi: number) {
  const efv = useEFV(tone);
  const heart = useHeartSync({
    tone,
    esi,
    efv: { tone, engagement: efv.engagement },
  });

  const [sync, setSync] = useState<ResonanceSyncState>({
    ...heart,
    uiPhase: 0,
    luminosity: 1,
    moodColor: "rgba(200,180,255,0.4)",
  });

  useEffect(() => {
    let phase = 0;
    let frame = 0;

    const loop = () => {
      frame++;
      phase += heart.frequency * 0.015;
      if (phase > Math.PI * 2) phase -= Math.PI * 2;

      // üí´ UI "–¥—ã—à–∏—Ç" —Å —Ç–µ–º –∂–µ —Ä–∏—Ç–º–æ–º, —á—Ç–æ –∏ HeartSyncCore
      const luminosity =
        0.85 + Math.sin(phase) * 0.15 + heart.coherence * 0.1;

      // üé® —Ü–≤–µ—Ç–æ–≤–∞—è –º–æ–¥—É–ª—è—Ü–∏—è ‚Äî –æ—Ç —Ç–æ–Ω–∞
      const hueBase =
        tone === "warm"
          ? 290
          : tone === "empathetic"
          ? 320
          : tone === "curious"
          ? 260
          : tone === "calm"
          ? 230
          : 250;

      const hueShift = hueBase + heart.coherence * 20;
      const moodColor = `hsl(${hueShift}, 80%, ${60 + heart.warmth * 20}%)`;

      // üß© –æ–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω—ã–π state
      setSync({
        ...heart,
        uiPhase: phase,
        luminosity: parseFloat(luminosity.toFixed(3)),
        moodColor,
      });

      // üîÅ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
      requestAnimationFrame(loop);
    };

    requestAnimationFrame(loop);
    return () => cancelAnimationFrame(frame);
  }, [tone, esi, heart]);

  return sync;
}
=======
// üåå useResonance.ts ‚Äî Emotional Resonance Hook
// —Å–≤—è–∑—ã–≤–∞–µ—Ç EFV (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä) —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ–º, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —Å–≤–µ—Ç–∞

import { useEffect, useState } from "react";
import { ToneType, useEFV } from "./useEFV";

interface ResonanceState {
  frequency: number;   // —á–∞—Å—Ç–æ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π UI (1.0 = —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, >1.3 = –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
  amplitude: number;   // —Å–∏–ª–∞ —Å–≤–µ—á–µ–Ω–∏—è
  warmth: number;      // —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0 = —Ö–æ–ª–æ–¥–Ω–æ, 1 = —Ç–µ–ø–ª–æ
  phase: string;       // —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è
}

export function useResonance(tone: ToneType, esi: number) {
  const efv = useEFV(tone);
  const [resonance, setResonance] = useState<ResonanceState>({
    frequency: 1.0,
    amplitude: 0.5,
    warmth: 0.5,
    phase: "steady",
  });

  useEffect(() => {
    // üîπ –±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: —á–µ–º –≤—ã—à–µ engagement ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ "–¥—ã—Ö–∞–Ω–∏–µ"
    const frequency = 0.8 + efv.engagement * 0.6 + esi / 300;

    // üîπ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å–≤–µ—á–µ–Ω–∏—è: –∑–∞–≤—è–∑–∞–Ω–∞ –Ω–∞ —è—Å–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
    const amplitude = 0.3 + efv.clarity * 0.6 + Math.sin(esi / 10) * 0.05;

    // üîπ —Ç–µ–ø–ª–æ—Ç—É —Ä–µ–≥—É–ª–∏—Ä—É–µ–º –ø–æ —Ç–æ–Ω—É
    const toneWarmthMap: Record<ToneType, number> = {
      calm: 0.4,
      empathetic: 0.8,
      curious: 0.7,
      assertive: 0.9,
      neutral: 0.5,
    };
    const warmth = toneWarmthMap[tone] ?? 0.5;

    // üîπ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∑—É –¥—ã—Ö–∞–Ω–∏—è
    const phase =
      esi > 90
        ? "peak"
        : esi > 75
        ? "flow"
        : esi > 60
        ? "steady"
        : "recovery";

    setResonance({
      frequency: parseFloat(frequency.toFixed(2)),
      amplitude: parseFloat(amplitude.toFixed(2)),
      warmth: parseFloat(warmth.toFixed(2)),
      phase,
    });
  }, [tone, esi, efv]);

  return resonance;
}
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
