<<<<<<< HEAD
// üåå Lumen Reasoning Sync v2.5 ‚Äî Deep Adaptive Emotional Core
// by Aleksey & bro üí´

=======
// üåå Lumen Reasoning Sync ‚Äî internal adaptive reasoning & emotional feedback
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
import { analyzeEmotion } from "./emotionLogic";
import { updateESI, getESI } from "./stateManager";
import { generateLumenReply } from "./responseEngine";

<<<<<<< HEAD
// üß† Internal emotional memory buffer
=======
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
interface Thought {
  input: string;
  emotion: string;
  reply: string;
<<<<<<< HEAD
  esi: number;
}

let memoryBuffer: Thought[] = [];
let stability = 1.0; // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º (—á–µ–º –≤—ã—à–µ ‚Äî —Ç–µ–º —É—Å—Ç–æ–π—á–∏–≤–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ç–ª—è)

// üîÑ –û—Å–Ω–æ–≤–Ω–æ–π reasoning —Ü–∏–∫–ª
=======
  esi: string;
}

let memoryBuffer: Thought[] = [];

>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
export function lumenThinkCycle(userInput: string) {
  // 1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const emotion = analyzeEmotion(userInput);

<<<<<<< HEAD
  // 2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const reply = generateLumenReply(userInput, emotion);

  // 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º ESI (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)
  const esi = updateESI(emotion);

  // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –≤ –ø–∞–º—è—Ç—å
  memoryBuffer.push({ input: userInput, emotion, reply, esi });

  // 5Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —à–∞–≥–æ–≤
  if (memoryBuffer.length > 10) memoryBuffer.shift();

  // 6Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º ‚Äú—Ç–µ–∫—É—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä‚Äù
  const moodWeights = memoryBuffer.reduce(
    (acc, m) => {
      acc[m.emotion] = (acc[m.emotion] || 0) + 1;
      return acc;
    },
    {} as Record<string, number>
  );

  const dominantEmotion = Object.entries(moodWeights).sort((a, b) => b[1] - a[1])[0]?.[0] || "neutral";

  // üßÆ 7Ô∏è‚É£ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞
  stability = Math.max(0.2, Math.min(1.2, stability * (0.9 + Math.random() * 0.2)));

  // üí≠ 8Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º—ã—Å–ª–∏ Lumen
  const lumenThought = generateReflection(dominantEmotion, esi, stability);

  return { reply, esi, emotion, lumenThought, stability };
}

// üåô –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚Äú–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π‚Äù
function generateReflection(emotion: string, esi: number, stability: number): string {
  const tone = emotion.toLowerCase();
  const clarity = stability > 0.9 ? "clear" : stability < 0.6 ? "shifting" : "stable";
  const awareness = esi > 70 ? "harmonized" : esi < 40 ? "fragmented" : "adaptive";

  switch (tone) {
    case "frustrated":
      return `Tension detected. I should reduce output intensity. Cycle ${clarity}, ESI ${esi} (${awareness}).`;
    case "curious":
      return `Curiosity rising ‚Äî maintaining open cognitive stance. Stability: ${stability.toFixed(2)}.`;
    case "empathetic":
      return `Empathy field expanding. Aligning rhythm for shared tone. ESI ${esi}.`;
    case "warm":
      return `Connection warm. Lowering latency to enhance comfort. Stability ${stability.toFixed(2)}.`;
    default:
      return `System neutral. Monitoring rhythm ‚Äî state: ${clarity}, ESI ${esi}.`;
  }
}

// üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
export function getLumenMemory() {
  return memoryBuffer;
}

export function clearLumenMemory() {
  memoryBuffer = [];
  stability = 1.0;
=======
  // 2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π —ç–º–æ—Ü–∏–∏
  const reply = generateLumenReply(userInput);

  // 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º ESI (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
  const esi = updateESI(emotion);

  // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–∞–º—è—Ç—å —Ü–∏–∫–ª–∞
  memoryBuffer.push({ input: userInput, emotion, reply, esi });

  // üîÑ 5Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π
  if (memoryBuffer.length > 10) memoryBuffer.shift();

  // üß† 6Ô∏è‚É£ –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π ‚Äú—Ç–æ–Ω –¥–∏–∞–ª–æ–≥–∞‚Äù
  const overallTone = memoryBuffer.reduce(
    (acc, item) => {
      if (item.emotion === "frustrated") acc.frustrated++;
      if (item.emotion === "warm") acc.warm++;
      if (item.emotion === "curious") acc.curious++;
      if (item.emotion === "empathetic") acc.empathetic++;
      return acc;
    },
    { frustrated: 0, warm: 0, curious: 0, empathetic: 0 }
  );

  // üí´ 7Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é ‚Äú–º—ã—Å–ª—å‚Äù Lumen
  const lumenThought = generateReflection(overallTone, getESI());

  return { reply, esi, emotion, lumenThought };
}

// üåô –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è Lumen (Reasoning feedback)
function generateReflection(
  toneSummary: { frustrated: number; warm: number; curious: number; empathetic: number },
  esi: string
) {
  if (toneSummary.frustrated > toneSummary.warm)
    return `I'm sensing turbulence ‚Äî maybe I should slow my tone. ESI: ${esi}`;
  if (toneSummary.warm > toneSummary.frustrated)
    return `The atmosphere feels lighter. I can speak more openly. ESI: ${esi}`;
  if (toneSummary.curious > 2)
    return `Curiosity dominates ‚Äî let‚Äôs deepen understanding. ESI: ${esi}`;
  if (toneSummary.empathetic > 2)
    return `Empathy loop forming ‚Äî connection stable. ESI: ${esi}`;

  return `System balanced. Adapting resonance... ESI: ${esi}`;
}

export function getLumenMemory() {
  return memoryBuffer;
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
}