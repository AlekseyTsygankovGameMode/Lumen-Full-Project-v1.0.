<<<<<<< HEAD
// üåå LUMEN REASONING ENGINE v3.5 ‚Äî Resonance-Aware Thought Loop
// by Aleksey & bro ‚ö°

import { sql, hasDb } from "../../db/client.js";
import { toneToEFV, EFV, compareEFV, describeEFVTrend } from "../metrics/efv.js";
import { calculateESI, describeESIChange } from "../metrics/esi.js";
=======
// /core/engine/reasoning.ts
import { sql, hasDb } from "../../db/client.js";
import { toneToEFV, EFV } from "../metrics/efv.js";
import { calculateESI } from "../metrics/esi.js";
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a

export interface ReasoningInput {
  session_id: string;
  user_input: string;
  model_response: string;
<<<<<<< HEAD
  tone: string; // "calm" | "empathetic" | "curious" | ...
}

export interface ReasoningOutput {
  efv: EFV;
  esi: number;
  reasoning_trace: string[];
  trend: string;
  timestamp: string;
}

// üß© –∫—ç—à–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
let previousEFV: EFV | null = null;
let previousESI: number | null = null;

export async function processTurn(input: ReasoningInput): Promise<ReasoningOutput> {
  const { session_id, user_input, model_response, tone } = input;

  // 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º EFV (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä)
  const efv: EFV = toneToEFV(tone);

  // 2Ô∏è‚É£ –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π ESI —Å —É—á—ë—Ç–æ–º EFV
  const esi = calculateESI(efv);

  // 3Ô∏è‚É£ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
  let trend = "neutral";
  let efvTrendText = "";
  let esiTrendText = "";

  if (previousEFV && previousESI !== null) {
    const efvTrend = compareEFV(previousEFV, efv);
    efvTrendText = describeEFVTrend(previousEFV, efv);
    esiTrendText = describeESIChange(previousESI, esi);
    trend = efvTrend;
  }

  // –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
  previousEFV = efv;
  previousESI = esi;

  // 4Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–ª—è–µ–º reasoning trace
  const reasoning_trace = [
    `User input ‚Üí ${user_input}`,
    `Model response ‚Üí ${model_response}`,
    `Tone analyzed ‚Üí ${tone}`,
    `EFV: ${JSON.stringify(efv)}`,
    `ESI: ${esi.toFixed(1)}`,
    `EFV trend: ${efvTrendText}`,
    `ESI trend: ${esiTrendText}`,
  ];

  // 5Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É
=======
  tone: string; // "calm" | "empathetic" | ...
}

export interface ReasoningOutput {
  efv: EFV;                    // <-- —Ñ–∏–∫—Å: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º EFV, –∞ –Ω–µ Record<string, number>
  esi: number;
  reasoning_trace: string[];
  timestamp: string;
}

export async function processTurn(input: ReasoningInput): Promise<ReasoningOutput> {
  const { session_id, user_input, model_response, tone } = input;

  // 1) —Ç–æ–Ω -> EFV
  const efv: EFV = toneToEFV(tone);

  // 2) —Å—á–∏—Ç–∞–µ–º ESI
  // <-- —Ñ–∏–∫—Å: –ø–µ—Ä–µ–¥–∞—ë–º –≤ calculateESI —Å–∞–º efv, –±–µ–∑ –æ–±—ë—Ä—Ç–∫–∏ { efv }
  const esi = calculateESI(efv.engagement);

  // 3) —Ç—Ä–µ–π—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
  const reasoning_trace = [
    `User input: ${user_input}`,
    `Model response: ${model_response}`,
    `Tone analyzed as: ${tone}`,
    `EFV: ${JSON.stringify(efv)}`,
    `ESI: ${esi.toFixed(3)}`
  ];

  // 4) –ª–æ–≥ –≤ –ë–î (turn_eval)
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
  if (hasDb && sql) {
    try {
      await sql/*sql*/`
        insert into turn_eval (session_id, user_input, model_response, score, created_at)
        values (${session_id}, ${user_input}, ${model_response}, ${esi}, now());
      `;
    } catch (err) {
<<<<<<< HEAD
      console.error("‚ùå DB insert failed:", err);
    }
  }

  // 6Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π reasoning output
=======
      console.error("DB insert failed:", err);
    }
  }

  // 5) –æ—Ç–≤–µ—Ç –¥–≤–∏–∂–∫–∞
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
  return {
    efv,
    esi,
    reasoning_trace,
<<<<<<< HEAD
    trend,
=======
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
    timestamp: new Date().toISOString(),
  };
}