<<<<<<< HEAD
// üåô Lumen Emotional Field v3.0 ‚Äî Weighted Pattern + Emotional Signature Engine
// by Aleksey & bro ‚ö°
// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –≤–µ—Å–∞–º–∏, –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π –∏ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π.

export type Emotion =
  | "frustrated"
  | "curious"
  | "warm"
  | "empathetic"
  | "neutral";

interface EmotionScore {
  frustrated: number;
  curious: number;
  warm: number;
  empathetic: number;
}

/**
 * üß† analyzeEmotion()
 * –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Å–æ–≤—ã–µ –∫–ª—é—á–∏, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.
 */
export function analyzeEmotion(input: string): Emotion {
  if (!input || typeof input !== "string") return "neutral";
  const text = input.toLowerCase().trim();

  const score: EmotionScore = {
    frustrated: 0,
    curious: 0,
    warm: 0,
    empathetic: 0,
  };

  // üí¢ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ / –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
  const frustrationWords = [
    "angry",
    "frustrating",
    "annoyed",
    "tired",
    "ugh",
    "hate",
    "stop",
    "mad",
    "confused",
    "lost",
  ];

  // üîç –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ / –∏–Ω—Ç–µ—Ä–µ—Å
  const curiosityWords = [
    "why",
    "how",
    "what",
    "explain",
    "understand",
    "maybe",
    "wonder",
    "question",
  ];

  // üíó —Ç–µ–ø–ª–æ / –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const warmthWords = [
    "thanks",
    "thank you",
    "love",
    "appreciate",
    "calm",
    "peace",
    "relaxed",
    "glad",
  ];

  // üåä —Å–æ—á—É–≤—Å—Ç–≤–∏–µ / —ç–º–ø–∞—Ç–∏—è
  const empathyWords = [
    "sorry",
    "feel",
    "care",
    "together",
    "sad",
    "forgive",
    "kind",
    "miss",
  ];

  // üß© –≤–µ—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–π
  frustrationWords.forEach((w) => text.includes(w) && (score.frustrated += 1.2));
  curiosityWords.forEach((w) => text.includes(w) && (score.curious += 1.1));
  warmthWords.forEach((w) => text.includes(w) && (score.warm += 1.3));
  empathyWords.forEach((w) => text.includes(w) && (score.empathetic += 1.4));

  // üî† –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  if (text.includes("?")) score.curious += 0.4;
  if (text.includes("!")) score.frustrated += 0.3;
  if (text.includes("...")) score.empathetic += 0.3;
  if (text.endsWith("!")) score.frustrated += 0.5;
  if (text.endsWith("?")) score.curious += 0.2;

  // üîä –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–¥–ª–∏–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ—Ä–∞–∑—ã)
  const length = text.split(" ").length;
  if (length < 3) score.frustrated += 0.2; // –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ä–µ–∑–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
  if (length > 10) score.curious += 0.3; // –¥–ª–∏–Ω–Ω—ã–µ ‚Äî —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
  if (text.match(/i feel|i think|i believe/)) score.empathetic += 0.4;

  // ü©∂ –∏—Ç–æ–≥–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  const dominant = Object.entries(score).sort((a, b) => b[1] - a[1])[0];
  return dominant && dominant[1] > 0 ? (dominant[0] as Emotion) : "neutral";
}

/**
 * üí¨ getEmotionDescriptor()
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è reasoning-–ø–∞–Ω–µ–ª–∏.
 */
export function getEmotionDescriptor(emotion: Emotion): string {
  switch (emotion) {
    case "frustrated":
      return "Detected friction ‚Äî reducing tone intensity and promoting empathy.";
    case "curious":
      return "Exploratory focus ‚Äî user seeking clarity or deeper understanding.";
    case "warm":
      return "Positive emotional field ‚Äî trust and resonance are stable.";
    case "empathetic":
      return "Compassion flow detected ‚Äî reflective alignment initiated.";
    default:
      return "Stable neutrality ‚Äî balanced affective state.";
  }
}

/**
 * ‚öñ getEmotionWeights()
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (optional use in metrics).
 */
export function getEmotionWeights(): Record<Emotion, number> {
  return {
    frustrated: 1.2,
    curious: 1.1,
    warm: 1.3,
    empathetic: 1.4,
    neutral: 1.0,
  };
=======
// üåô Lumen Emotional Field ‚Äî interprets tone & keywords
export function analyzeEmotion(input: string) {
  const tone = input.toLowerCase();

  if (tone.includes("frustrating") || tone.includes("angry") || tone.includes("ugh"))
    return "frustrated";
  if (tone.includes("thanks") || tone.includes("love") || tone.includes("appreciate"))
    return "warm";
  if (tone.includes("why") || tone.includes("how") || tone.includes("?"))
    return "curious";
  if (tone.includes("sad") || tone.includes("sorry"))
    return "empathetic";

  return "neutral";
>>>>>>> 9b1fa7f8a480ef2921a4e1772f94583ba7d3213a
}